// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/supplier/v1/supplier.proto

package supplierv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SupplierService_CreateSupplier_FullMethodName         = "/supplier.v1.SupplierService/CreateSupplier"
	SupplierService_GetSupplier_FullMethodName            = "/supplier.v1.SupplierService/GetSupplier"
	SupplierService_UpdateSupplier_FullMethodName         = "/supplier.v1.SupplierService/UpdateSupplier"
	SupplierService_DeleteSupplier_FullMethodName         = "/supplier.v1.SupplierService/DeleteSupplier"
	SupplierService_ListSuppliers_FullMethodName          = "/supplier.v1.SupplierService/ListSuppliers"
	SupplierService_ListAdapters_FullMethodName           = "/supplier.v1.SupplierService/ListAdapters"
	SupplierService_GetAdapterCapabilities_FullMethodName = "/supplier.v1.SupplierService/GetAdapterCapabilities"
	SupplierService_TestAdapterConnection_FullMethodName  = "/supplier.v1.SupplierService/TestAdapterConnection"
	SupplierService_SyncProducts_FullMethodName           = "/supplier.v1.SupplierService/SyncProducts"
	SupplierService_SyncInventory_FullMethodName          = "/supplier.v1.SupplierService/SyncInventory"
)

// SupplierServiceClient is the client API for SupplierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SupplierService defines the service for managing suppliers
type SupplierServiceClient interface {
	// Create a new supplier
	CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error)
	// Get a supplier by ID
	GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error)
	// Update an existing supplier
	UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error)
	// Delete a supplier
	DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error)
	// List suppliers with pagination
	ListSuppliers(ctx context.Context, in *ListSuppliersRequest, opts ...grpc.CallOption) (*ListSuppliersResponse, error)
	// List available supplier adapters
	ListAdapters(ctx context.Context, in *ListAdaptersRequest, opts ...grpc.CallOption) (*ListAdaptersResponse, error)
	// Get adapter capabilities
	GetAdapterCapabilities(ctx context.Context, in *GetAdapterCapabilitiesRequest, opts ...grpc.CallOption) (*GetAdapterCapabilitiesResponse, error)
	// Test adapter connection
	TestAdapterConnection(ctx context.Context, in *TestAdapterConnectionRequest, opts ...grpc.CallOption) (*TestAdapterConnectionResponse, error)
	// Sync products from supplier
	SyncProducts(ctx context.Context, in *SyncProductsRequest, opts ...grpc.CallOption) (*SyncProductsResponse, error)
	// Sync inventory from supplier
	SyncInventory(ctx context.Context, in *SyncInventoryRequest, opts ...grpc.CallOption) (*SyncInventoryResponse, error)
}

type supplierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplierServiceClient(cc grpc.ClientConnInterface) SupplierServiceClient {
	return &supplierServiceClient{cc}
}

func (c *supplierServiceClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSupplierResponse)
	err := c.cc.Invoke(ctx, SupplierService_CreateSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupplierResponse)
	err := c.cc.Invoke(ctx, SupplierService_GetSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSupplierResponse)
	err := c.cc.Invoke(ctx, SupplierService_UpdateSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSupplierResponse)
	err := c.cc.Invoke(ctx, SupplierService_DeleteSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) ListSuppliers(ctx context.Context, in *ListSuppliersRequest, opts ...grpc.CallOption) (*ListSuppliersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSuppliersResponse)
	err := c.cc.Invoke(ctx, SupplierService_ListSuppliers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) ListAdapters(ctx context.Context, in *ListAdaptersRequest, opts ...grpc.CallOption) (*ListAdaptersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdaptersResponse)
	err := c.cc.Invoke(ctx, SupplierService_ListAdapters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) GetAdapterCapabilities(ctx context.Context, in *GetAdapterCapabilitiesRequest, opts ...grpc.CallOption) (*GetAdapterCapabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdapterCapabilitiesResponse)
	err := c.cc.Invoke(ctx, SupplierService_GetAdapterCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) TestAdapterConnection(ctx context.Context, in *TestAdapterConnectionRequest, opts ...grpc.CallOption) (*TestAdapterConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestAdapterConnectionResponse)
	err := c.cc.Invoke(ctx, SupplierService_TestAdapterConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) SyncProducts(ctx context.Context, in *SyncProductsRequest, opts ...grpc.CallOption) (*SyncProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncProductsResponse)
	err := c.cc.Invoke(ctx, SupplierService_SyncProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) SyncInventory(ctx context.Context, in *SyncInventoryRequest, opts ...grpc.CallOption) (*SyncInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncInventoryResponse)
	err := c.cc.Invoke(ctx, SupplierService_SyncInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplierServiceServer is the server API for SupplierService service.
// All implementations must embed UnimplementedSupplierServiceServer
// for forward compatibility.
//
// SupplierService defines the service for managing suppliers
type SupplierServiceServer interface {
	// Create a new supplier
	CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error)
	// Get a supplier by ID
	GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error)
	// Update an existing supplier
	UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error)
	// Delete a supplier
	DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error)
	// List suppliers with pagination
	ListSuppliers(context.Context, *ListSuppliersRequest) (*ListSuppliersResponse, error)
	// List available supplier adapters
	ListAdapters(context.Context, *ListAdaptersRequest) (*ListAdaptersResponse, error)
	// Get adapter capabilities
	GetAdapterCapabilities(context.Context, *GetAdapterCapabilitiesRequest) (*GetAdapterCapabilitiesResponse, error)
	// Test adapter connection
	TestAdapterConnection(context.Context, *TestAdapterConnectionRequest) (*TestAdapterConnectionResponse, error)
	// Sync products from supplier
	SyncProducts(context.Context, *SyncProductsRequest) (*SyncProductsResponse, error)
	// Sync inventory from supplier
	SyncInventory(context.Context, *SyncInventoryRequest) (*SyncInventoryResponse, error)
	mustEmbedUnimplementedSupplierServiceServer()
}

// UnimplementedSupplierServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupplierServiceServer struct{}

func (UnimplementedSupplierServiceServer) CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) ListSuppliers(context.Context, *ListSuppliersRequest) (*ListSuppliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuppliers not implemented")
}
func (UnimplementedSupplierServiceServer) ListAdapters(context.Context, *ListAdaptersRequest) (*ListAdaptersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdapters not implemented")
}
func (UnimplementedSupplierServiceServer) GetAdapterCapabilities(context.Context, *GetAdapterCapabilitiesRequest) (*GetAdapterCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdapterCapabilities not implemented")
}
func (UnimplementedSupplierServiceServer) TestAdapterConnection(context.Context, *TestAdapterConnectionRequest) (*TestAdapterConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAdapterConnection not implemented")
}
func (UnimplementedSupplierServiceServer) SyncProducts(context.Context, *SyncProductsRequest) (*SyncProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncProducts not implemented")
}
func (UnimplementedSupplierServiceServer) SyncInventory(context.Context, *SyncInventoryRequest) (*SyncInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInventory not implemented")
}
func (UnimplementedSupplierServiceServer) mustEmbedUnimplementedSupplierServiceServer() {}
func (UnimplementedSupplierServiceServer) testEmbeddedByValue()                         {}

// UnsafeSupplierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupplierServiceServer will
// result in compilation errors.
type UnsafeSupplierServiceServer interface {
	mustEmbedUnimplementedSupplierServiceServer()
}

func RegisterSupplierServiceServer(s grpc.ServiceRegistrar, srv SupplierServiceServer) {
	// If the following call pancis, it indicates UnimplementedSupplierServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SupplierService_ServiceDesc, srv)
}

func _SupplierService_CreateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).CreateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_CreateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).CreateSupplier(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_GetSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).GetSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_GetSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).GetSupplier(ctx, req.(*GetSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_UpdateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).UpdateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_UpdateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).UpdateSupplier(ctx, req.(*UpdateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_DeleteSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).DeleteSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_DeleteSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).DeleteSupplier(ctx, req.(*DeleteSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_ListSuppliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuppliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).ListSuppliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_ListSuppliers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).ListSuppliers(ctx, req.(*ListSuppliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_ListAdapters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdaptersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).ListAdapters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_ListAdapters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).ListAdapters(ctx, req.(*ListAdaptersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_GetAdapterCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdapterCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).GetAdapterCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_GetAdapterCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).GetAdapterCapabilities(ctx, req.(*GetAdapterCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_TestAdapterConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAdapterConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).TestAdapterConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_TestAdapterConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).TestAdapterConnection(ctx, req.(*TestAdapterConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_SyncProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).SyncProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_SyncProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).SyncProducts(ctx, req.(*SyncProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_SyncInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).SyncInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_SyncInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).SyncInventory(ctx, req.(*SyncInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupplierService_ServiceDesc is the grpc.ServiceDesc for SupplierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupplierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supplier.v1.SupplierService",
	HandlerType: (*SupplierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSupplier",
			Handler:    _SupplierService_CreateSupplier_Handler,
		},
		{
			MethodName: "GetSupplier",
			Handler:    _SupplierService_GetSupplier_Handler,
		},
		{
			MethodName: "UpdateSupplier",
			Handler:    _SupplierService_UpdateSupplier_Handler,
		},
		{
			MethodName: "DeleteSupplier",
			Handler:    _SupplierService_DeleteSupplier_Handler,
		},
		{
			MethodName: "ListSuppliers",
			Handler:    _SupplierService_ListSuppliers_Handler,
		},
		{
			MethodName: "ListAdapters",
			Handler:    _SupplierService_ListAdapters_Handler,
		},
		{
			MethodName: "GetAdapterCapabilities",
			Handler:    _SupplierService_GetAdapterCapabilities_Handler,
		},
		{
			MethodName: "TestAdapterConnection",
			Handler:    _SupplierService_TestAdapterConnection_Handler,
		},
		{
			MethodName: "SyncProducts",
			Handler:    _SupplierService_SyncProducts_Handler,
		},
		{
			MethodName: "SyncInventory",
			Handler:    _SupplierService_SyncInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/supplier/v1/supplier.proto",
}
