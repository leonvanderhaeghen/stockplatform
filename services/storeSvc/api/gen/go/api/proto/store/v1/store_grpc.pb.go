// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/proto/store/v1/store.proto

package storev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StoreService_CreateStore_FullMethodName              = "/store.v1.StoreService/CreateStore"
	StoreService_GetStore_FullMethodName                 = "/store.v1.StoreService/GetStore"
	StoreService_ListStores_FullMethodName               = "/store.v1.StoreService/ListStores"
	StoreService_UpdateStore_FullMethodName              = "/store.v1.StoreService/UpdateStore"
	StoreService_DeleteStore_FullMethodName              = "/store.v1.StoreService/DeleteStore"
	StoreService_AddProductToStore_FullMethodName        = "/store.v1.StoreService/AddProductToStore"
	StoreService_UpdateStoreProductStock_FullMethodName  = "/store.v1.StoreService/UpdateStoreProductStock"
	StoreService_RemoveProductFromStore_FullMethodName   = "/store.v1.StoreService/RemoveProductFromStore"
	StoreService_GetStoreProducts_FullMethodName         = "/store.v1.StoreService/GetStoreProducts"
	StoreService_GetProductStoreLocations_FullMethodName = "/store.v1.StoreService/GetProductStoreLocations"
	StoreService_ReserveProduct_FullMethodName           = "/store.v1.StoreService/ReserveProduct"
	StoreService_CancelReservation_FullMethodName        = "/store.v1.StoreService/CancelReservation"
	StoreService_GetReservations_FullMethodName          = "/store.v1.StoreService/GetReservations"
	StoreService_CompleteReservation_FullMethodName      = "/store.v1.StoreService/CompleteReservation"
	StoreService_AssignUserToStore_FullMethodName        = "/store.v1.StoreService/AssignUserToStore"
	StoreService_RemoveUserFromStore_FullMethodName      = "/store.v1.StoreService/RemoveUserFromStore"
	StoreService_GetStoreUsers_FullMethodName            = "/store.v1.StoreService/GetStoreUsers"
	StoreService_GetUserStores_FullMethodName            = "/store.v1.StoreService/GetUserStores"
	StoreService_RecordSale_FullMethodName               = "/store.v1.StoreService/RecordSale"
	StoreService_GetStoreSales_FullMethodName            = "/store.v1.StoreService/GetStoreSales"
	StoreService_ExportStoreProducts_FullMethodName      = "/store.v1.StoreService/ExportStoreProducts"
	StoreService_ExportStoreSales_FullMethodName         = "/store.v1.StoreService/ExportStoreSales"
)

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StoreService provides operations for managing physical stores
type StoreServiceClient interface {
	// Store management
	CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error)
	GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error)
	DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*DeleteStoreResponse, error)
	// Store inventory management
	AddProductToStore(ctx context.Context, in *AddProductToStoreRequest, opts ...grpc.CallOption) (*AddProductToStoreResponse, error)
	UpdateStoreProductStock(ctx context.Context, in *UpdateStoreProductStockRequest, opts ...grpc.CallOption) (*UpdateStoreProductStockResponse, error)
	RemoveProductFromStore(ctx context.Context, in *RemoveProductFromStoreRequest, opts ...grpc.CallOption) (*RemoveProductFromStoreResponse, error)
	GetStoreProducts(ctx context.Context, in *GetStoreProductsRequest, opts ...grpc.CallOption) (*GetStoreProductsResponse, error)
	GetProductStoreLocations(ctx context.Context, in *GetProductStoreLocationsRequest, opts ...grpc.CallOption) (*GetProductStoreLocationsResponse, error)
	// Product reservations
	ReserveProduct(ctx context.Context, in *ReserveProductRequest, opts ...grpc.CallOption) (*ReserveProductResponse, error)
	CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error)
	GetReservations(ctx context.Context, in *GetReservationsRequest, opts ...grpc.CallOption) (*GetReservationsResponse, error)
	CompleteReservation(ctx context.Context, in *CompleteReservationRequest, opts ...grpc.CallOption) (*CompleteReservationResponse, error)
	// Store user management
	AssignUserToStore(ctx context.Context, in *AssignUserToStoreRequest, opts ...grpc.CallOption) (*AssignUserToStoreResponse, error)
	RemoveUserFromStore(ctx context.Context, in *RemoveUserFromStoreRequest, opts ...grpc.CallOption) (*RemoveUserFromStoreResponse, error)
	GetStoreUsers(ctx context.Context, in *GetStoreUsersRequest, opts ...grpc.CallOption) (*GetStoreUsersResponse, error)
	GetUserStores(ctx context.Context, in *GetUserStoresRequest, opts ...grpc.CallOption) (*GetUserStoresResponse, error)
	// Sales tracking
	RecordSale(ctx context.Context, in *RecordSaleRequest, opts ...grpc.CallOption) (*RecordSaleResponse, error)
	GetStoreSales(ctx context.Context, in *GetStoreSalesRequest, opts ...grpc.CallOption) (*GetStoreSalesResponse, error)
	// Export functionality
	ExportStoreProducts(ctx context.Context, in *ExportStoreProductsRequest, opts ...grpc.CallOption) (*ExportStoreProductsResponse, error)
	ExportStoreSales(ctx context.Context, in *ExportStoreSalesRequest, opts ...grpc.CallOption) (*ExportStoreSalesResponse, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_CreateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, StoreService_ListStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_UpdateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*DeleteStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_DeleteStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) AddProductToStore(ctx context.Context, in *AddProductToStoreRequest, opts ...grpc.CallOption) (*AddProductToStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductToStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_AddProductToStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) UpdateStoreProductStock(ctx context.Context, in *UpdateStoreProductStockRequest, opts ...grpc.CallOption) (*UpdateStoreProductStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStoreProductStockResponse)
	err := c.cc.Invoke(ctx, StoreService_UpdateStoreProductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) RemoveProductFromStore(ctx context.Context, in *RemoveProductFromStoreRequest, opts ...grpc.CallOption) (*RemoveProductFromStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveProductFromStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_RemoveProductFromStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreProducts(ctx context.Context, in *GetStoreProductsRequest, opts ...grpc.CallOption) (*GetStoreProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreProductsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetProductStoreLocations(ctx context.Context, in *GetProductStoreLocationsRequest, opts ...grpc.CallOption) (*GetProductStoreLocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductStoreLocationsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetProductStoreLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ReserveProduct(ctx context.Context, in *ReserveProductRequest, opts ...grpc.CallOption) (*ReserveProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveProductResponse)
	err := c.cc.Invoke(ctx, StoreService_ReserveProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelReservationResponse)
	err := c.cc.Invoke(ctx, StoreService_CancelReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetReservations(ctx context.Context, in *GetReservationsRequest, opts ...grpc.CallOption) (*GetReservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReservationsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetReservations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) CompleteReservation(ctx context.Context, in *CompleteReservationRequest, opts ...grpc.CallOption) (*CompleteReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteReservationResponse)
	err := c.cc.Invoke(ctx, StoreService_CompleteReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) AssignUserToStore(ctx context.Context, in *AssignUserToStoreRequest, opts ...grpc.CallOption) (*AssignUserToStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignUserToStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_AssignUserToStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) RemoveUserFromStore(ctx context.Context, in *RemoveUserFromStoreRequest, opts ...grpc.CallOption) (*RemoveUserFromStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserFromStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_RemoveUserFromStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreUsers(ctx context.Context, in *GetStoreUsersRequest, opts ...grpc.CallOption) (*GetStoreUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreUsersResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetUserStores(ctx context.Context, in *GetUserStoresRequest, opts ...grpc.CallOption) (*GetUserStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserStoresResponse)
	err := c.cc.Invoke(ctx, StoreService_GetUserStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) RecordSale(ctx context.Context, in *RecordSaleRequest, opts ...grpc.CallOption) (*RecordSaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordSaleResponse)
	err := c.cc.Invoke(ctx, StoreService_RecordSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreSales(ctx context.Context, in *GetStoreSalesRequest, opts ...grpc.CallOption) (*GetStoreSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreSalesResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ExportStoreProducts(ctx context.Context, in *ExportStoreProductsRequest, opts ...grpc.CallOption) (*ExportStoreProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportStoreProductsResponse)
	err := c.cc.Invoke(ctx, StoreService_ExportStoreProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ExportStoreSales(ctx context.Context, in *ExportStoreSalesRequest, opts ...grpc.CallOption) (*ExportStoreSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportStoreSalesResponse)
	err := c.cc.Invoke(ctx, StoreService_ExportStoreSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations should embed UnimplementedStoreServiceServer
// for forward compatibility.
//
// StoreService provides operations for managing physical stores
type StoreServiceServer interface {
	// Store management
	CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error)
	GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error)
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error)
	DeleteStore(context.Context, *DeleteStoreRequest) (*DeleteStoreResponse, error)
	// Store inventory management
	AddProductToStore(context.Context, *AddProductToStoreRequest) (*AddProductToStoreResponse, error)
	UpdateStoreProductStock(context.Context, *UpdateStoreProductStockRequest) (*UpdateStoreProductStockResponse, error)
	RemoveProductFromStore(context.Context, *RemoveProductFromStoreRequest) (*RemoveProductFromStoreResponse, error)
	GetStoreProducts(context.Context, *GetStoreProductsRequest) (*GetStoreProductsResponse, error)
	GetProductStoreLocations(context.Context, *GetProductStoreLocationsRequest) (*GetProductStoreLocationsResponse, error)
	// Product reservations
	ReserveProduct(context.Context, *ReserveProductRequest) (*ReserveProductResponse, error)
	CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error)
	GetReservations(context.Context, *GetReservationsRequest) (*GetReservationsResponse, error)
	CompleteReservation(context.Context, *CompleteReservationRequest) (*CompleteReservationResponse, error)
	// Store user management
	AssignUserToStore(context.Context, *AssignUserToStoreRequest) (*AssignUserToStoreResponse, error)
	RemoveUserFromStore(context.Context, *RemoveUserFromStoreRequest) (*RemoveUserFromStoreResponse, error)
	GetStoreUsers(context.Context, *GetStoreUsersRequest) (*GetStoreUsersResponse, error)
	GetUserStores(context.Context, *GetUserStoresRequest) (*GetUserStoresResponse, error)
	// Sales tracking
	RecordSale(context.Context, *RecordSaleRequest) (*RecordSaleResponse, error)
	GetStoreSales(context.Context, *GetStoreSalesRequest) (*GetStoreSalesResponse, error)
	// Export functionality
	ExportStoreProducts(context.Context, *ExportStoreProductsRequest) (*ExportStoreProductsResponse, error)
	ExportStoreSales(context.Context, *ExportStoreSalesRequest) (*ExportStoreSalesResponse, error)
}

// UnimplementedStoreServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoreServiceServer struct{}

func (UnimplementedStoreServiceServer) CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedStoreServiceServer) GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedStoreServiceServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedStoreServiceServer) UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedStoreServiceServer) DeleteStore(context.Context, *DeleteStoreRequest) (*DeleteStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedStoreServiceServer) AddProductToStore(context.Context, *AddProductToStoreRequest) (*AddProductToStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToStore not implemented")
}
func (UnimplementedStoreServiceServer) UpdateStoreProductStock(context.Context, *UpdateStoreProductStockRequest) (*UpdateStoreProductStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoreProductStock not implemented")
}
func (UnimplementedStoreServiceServer) RemoveProductFromStore(context.Context, *RemoveProductFromStoreRequest) (*RemoveProductFromStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductFromStore not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreProducts(context.Context, *GetStoreProductsRequest) (*GetStoreProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreProducts not implemented")
}
func (UnimplementedStoreServiceServer) GetProductStoreLocations(context.Context, *GetProductStoreLocationsRequest) (*GetProductStoreLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductStoreLocations not implemented")
}
func (UnimplementedStoreServiceServer) ReserveProduct(context.Context, *ReserveProductRequest) (*ReserveProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveProduct not implemented")
}
func (UnimplementedStoreServiceServer) CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedStoreServiceServer) GetReservations(context.Context, *GetReservationsRequest) (*GetReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservations not implemented")
}
func (UnimplementedStoreServiceServer) CompleteReservation(context.Context, *CompleteReservationRequest) (*CompleteReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteReservation not implemented")
}
func (UnimplementedStoreServiceServer) AssignUserToStore(context.Context, *AssignUserToStoreRequest) (*AssignUserToStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserToStore not implemented")
}
func (UnimplementedStoreServiceServer) RemoveUserFromStore(context.Context, *RemoveUserFromStoreRequest) (*RemoveUserFromStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromStore not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreUsers(context.Context, *GetStoreUsersRequest) (*GetStoreUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreUsers not implemented")
}
func (UnimplementedStoreServiceServer) GetUserStores(context.Context, *GetUserStoresRequest) (*GetUserStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStores not implemented")
}
func (UnimplementedStoreServiceServer) RecordSale(context.Context, *RecordSaleRequest) (*RecordSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSale not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreSales(context.Context, *GetStoreSalesRequest) (*GetStoreSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreSales not implemented")
}
func (UnimplementedStoreServiceServer) ExportStoreProducts(context.Context, *ExportStoreProductsRequest) (*ExportStoreProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportStoreProducts not implemented")
}
func (UnimplementedStoreServiceServer) ExportStoreSales(context.Context, *ExportStoreSalesRequest) (*ExportStoreSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportStoreSales not implemented")
}
func (UnimplementedStoreServiceServer) testEmbeddedByValue() {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).CreateStore(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStore(ctx, req.(*GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ListStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_UpdateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).UpdateStore(ctx, req.(*UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_DeleteStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).DeleteStore(ctx, req.(*DeleteStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_AddProductToStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductToStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).AddProductToStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_AddProductToStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).AddProductToStore(ctx, req.(*AddProductToStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_UpdateStoreProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreProductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).UpdateStoreProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_UpdateStoreProductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).UpdateStoreProductStock(ctx, req.(*UpdateStoreProductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_RemoveProductFromStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductFromStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).RemoveProductFromStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_RemoveProductFromStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).RemoveProductFromStore(ctx, req.(*RemoveProductFromStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreProducts(ctx, req.(*GetStoreProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetProductStoreLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductStoreLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetProductStoreLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetProductStoreLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetProductStoreLocations(ctx, req.(*GetProductStoreLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ReserveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ReserveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ReserveProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ReserveProduct(ctx, req.(*ReserveProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_CancelReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).CancelReservation(ctx, req.(*CancelReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetReservations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetReservations(ctx, req.(*GetReservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_CompleteReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).CompleteReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_CompleteReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).CompleteReservation(ctx, req.(*CompleteReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_AssignUserToStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserToStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).AssignUserToStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_AssignUserToStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).AssignUserToStore(ctx, req.(*AssignUserToStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_RemoveUserFromStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).RemoveUserFromStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_RemoveUserFromStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).RemoveUserFromStore(ctx, req.(*RemoveUserFromStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreUsers(ctx, req.(*GetStoreUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetUserStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetUserStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetUserStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetUserStores(ctx, req.(*GetUserStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_RecordSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).RecordSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_RecordSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).RecordSale(ctx, req.(*RecordSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreSales(ctx, req.(*GetStoreSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ExportStoreProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportStoreProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ExportStoreProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ExportStoreProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ExportStoreProducts(ctx, req.(*ExportStoreProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ExportStoreSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportStoreSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ExportStoreSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ExportStoreSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ExportStoreSales(ctx, req.(*ExportStoreSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.v1.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStore",
			Handler:    _StoreService_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _StoreService_GetStore_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _StoreService_ListStores_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _StoreService_UpdateStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _StoreService_DeleteStore_Handler,
		},
		{
			MethodName: "AddProductToStore",
			Handler:    _StoreService_AddProductToStore_Handler,
		},
		{
			MethodName: "UpdateStoreProductStock",
			Handler:    _StoreService_UpdateStoreProductStock_Handler,
		},
		{
			MethodName: "RemoveProductFromStore",
			Handler:    _StoreService_RemoveProductFromStore_Handler,
		},
		{
			MethodName: "GetStoreProducts",
			Handler:    _StoreService_GetStoreProducts_Handler,
		},
		{
			MethodName: "GetProductStoreLocations",
			Handler:    _StoreService_GetProductStoreLocations_Handler,
		},
		{
			MethodName: "ReserveProduct",
			Handler:    _StoreService_ReserveProduct_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _StoreService_CancelReservation_Handler,
		},
		{
			MethodName: "GetReservations",
			Handler:    _StoreService_GetReservations_Handler,
		},
		{
			MethodName: "CompleteReservation",
			Handler:    _StoreService_CompleteReservation_Handler,
		},
		{
			MethodName: "AssignUserToStore",
			Handler:    _StoreService_AssignUserToStore_Handler,
		},
		{
			MethodName: "RemoveUserFromStore",
			Handler:    _StoreService_RemoveUserFromStore_Handler,
		},
		{
			MethodName: "GetStoreUsers",
			Handler:    _StoreService_GetStoreUsers_Handler,
		},
		{
			MethodName: "GetUserStores",
			Handler:    _StoreService_GetUserStores_Handler,
		},
		{
			MethodName: "RecordSale",
			Handler:    _StoreService_RecordSale_Handler,
		},
		{
			MethodName: "GetStoreSales",
			Handler:    _StoreService_GetStoreSales_Handler,
		},
		{
			MethodName: "ExportStoreProducts",
			Handler:    _StoreService_ExportStoreProducts_Handler,
		},
		{
			MethodName: "ExportStoreSales",
			Handler:    _StoreService_ExportStoreSales_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/store/v1/store.proto",
}
