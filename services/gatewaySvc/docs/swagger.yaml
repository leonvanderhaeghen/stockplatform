openapi: 3.0.0
info:
  title: Stock Platform Gateway API
  description: |
    This is the API documentation for the Stock Platform Gateway service.
    The gateway acts as an API Gateway for the Stock Platform microservices.
    
    ## Authentication
    
    Most endpoints require authentication using JWT (JSON Web Tokens).
    To authenticate, include the JWT token in the `Authorization` header:
    
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Error Handling
    
    All error responses follow the same format:
    
    ```json
    {
      "error": "Error message",
      "code": 400,
      "details": [
        {
          "field": "field_name",
          "message": "Validation error message"
        }
      ]
    }
    ```
  version: 1.0.0
  contact:
    name: API Support
    email: support@stockplatform.com
  license:
    name: Proprietary
    url: https://www.stockplatform.com/terms

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.stockplatform.com/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management
  - name: Products
    description: Product management
  - name: Categories
    description: Category management
  - name: Orders
    description: Order management
  - name: Inventory
    description: Inventory management
  - name: Suppliers
    description: Supplier management and supplier adapter integrations
  - name: POS
    description: Point of Sale operations
  - name: System
    description: System operations

security:
  - bearerAuth: []

paths:
  # Authentication
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: password123
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User with this email already exists
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Health Check
  /health:
    get:
      tags: [System]
      summary: Health check
      description: Check the health status of the gateway service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  time:
                    type: string
                    format: date-time
                  service:
                    type: string
                    example: gateway
                  version:
                    type: string
                    example: 1.0.0
                  services:
                    type: object
                    additionalProperties:
                      type: string
                    example:
                      product: ok
                      inventory: ok
                      order: ok
                      user: ok
                      supplier: ok

  # User Management
  /users:
    get:
      tags: [Users]
      summary: List all users (Admin only)
      description: Retrieve a list of all users with pagination
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
          description: Search term for filtering users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      tags: [Users]
      summary: Get current user profile
      description: Get the profile of the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [Users]
      summary: Update current user profile
      description: Update the profile of the currently authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/password:
    put:
      tags: [Users]
      summary: Change user password
      description: Change the password of the currently authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  example: oldpassword123
                newPassword:
                  type: string
                  minLength: 8
                  example: newpassword123
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/addresses:
    get:
      tags: [Users]
      summary: Get user addresses
      description: Get all addresses for the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Users]
      summary: Create user address
      description: Create a new address for the currently authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressRequest'
      responses:
        '201':
          description: Address created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/addresses/default:
    get:
      tags: [Users]
      summary: Get default user address
      description: Get the default address for the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default user address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/addresses/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Address ID
    put:
      tags: [Users]
      summary: Update user address
      description: Update an existing address for the currently authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressRequest'
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Users]
      summary: Delete user address
      description: Delete an address for the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Address deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/addresses/{id}/default:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Address ID
    put:
      tags: [Users]
      summary: Set default user address
      description: Set an address as the default for the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default address set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Default address set successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    get:
      tags: [Users]
      summary: Get user by ID (Admin only)
      description: Get a specific user by their ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Admin User Management
  /admin/users:
    get:
      tags: [Users]
      summary: List all users (Admin)
      description: Admin endpoint to list all users with advanced filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, all]
            default: all
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    get:
      tags: [Users]
      summary: Get user by ID (Admin)
      description: Admin endpoint to get user details by ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{id}/activate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    put:
      tags: [Users]
      summary: Activate user (Admin only)
      description: Activate a user account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User activated successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{id}/deactivate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    put:
      tags: [Users]
      summary: Deactivate user (Admin only)
      description: Deactivate a user account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deactivated successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Suppliers
  /suppliers:
    get:
      tags: [Suppliers]
      summary: List all suppliers
      description: Retrieve a list of all suppliers
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: A list of suppliers
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Supplier'
                  total:
                    type: integer
                    example: 25
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 20
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Suppliers]
      summary: Create a new supplier
      description: Create a new supplier with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSupplierRequest'
      responses:
        '201':
          description: Supplier created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /suppliers/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Supplier ID
    get:
      tags: [Suppliers]
      summary: Get supplier by ID
      description: Retrieve details of a specific supplier
      responses:
        '200':
          description: Supplier details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [Suppliers]
      summary: Update supplier
      description: Update an existing supplier's details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSupplierRequest'
      responses:
        '200':
          description: Supplier updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Suppliers]
      summary: Delete supplier
      description: Delete an existing supplier
      responses:
        '204':
          description: Supplier deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Supplier Adapters
  /suppliers/adapters:
    get:
      tags: [Suppliers]
      summary: List available supplier adapters
      description: Get a list of all registered supplier integration adapters
      responses:
        '200':
          description: List of available adapters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupplierAdapter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /suppliers/adapters/{name}/capabilities:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
        description: Adapter name
    get:
      tags: [Suppliers]
      summary: Get adapter capabilities
      description: Get the capabilities of a specific supplier adapter
      responses:
        '200':
          description: Adapter capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdapterCapabilities'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /suppliers/adapters/{name}/test-connection:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
        description: Adapter name
    post:
      tags: [Suppliers]
      summary: Test adapter connection
      description: Test the connection to a supplier's system using the specified adapter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdapterConfig'
      responses:
        '200':
          description: Connection successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Connection successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /suppliers/{id}/sync/products:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Supplier ID
    post:
      tags: [Suppliers]
      summary: Sync supplier products
      description: Synchronize products from the supplier using their configured adapter
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncOptions'
      responses:
        '200':
          description: Synchronization started
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    example: 5f8d3a7e9b8c7d6e5f4a3d2c
                  message:
                    type: string
                    example: Product synchronization started
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /suppliers/{id}/sync/inventory:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Supplier ID
    post:
      tags: [Suppliers]
      summary: Sync supplier inventory
      description: Synchronize inventory from the supplier using their configured adapter
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  type: object
                  properties:
                    full:
                      type: boolean
                      description: Whether to perform a full sync
      responses:
        '200':
          description: Synchronization job started
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    example: "sync-job-123"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  # POS Endpoints
  /pos/orders:
    post:
      tags: [POS]
      summary: Create a POS order
      description: Create a new order from a Point of Sale terminal
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POSOrderRequest'
      responses:
        '201':
          description: POS order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      orderId:
                        type: string
                        format: uuid
                        example: "550e8400-e29b-41d4-a716-446655440000"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /pos/transactions/quick:
    post:
      tags: [POS]
      summary: Process a quick POS transaction
      description: Create and process a POS order in a single step
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POSQuickTransactionRequest'
      responses:
        '200':
          description: POS transaction processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      orderId:
                        type: string
                        format: uuid
                        example: "550e8400-e29b-41d4-a716-446655440000"
                      receiptId:
                        type: string
                        example: "POS-123456"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /pos/inventory/check:
    post:
      tags: [POS]
      summary: Check inventory availability for POS
      description: Check if requested items are available at a specific location
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POSInventoryCheckRequest'
      responses:
        '200':
          description: Inventory check results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            productId:
                              type: string
                              format: uuid
                            sku:
                              type: string
                            requested:
                              type: integer
                            available:
                              type: integer
                            isAvailable:
                              type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /pos/inventory/reserve:
    post:
      tags: [POS]
      summary: Reserve inventory for POS transaction
      description: Reserve inventory items for a POS order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POSReservationRequest'
      responses:
        '200':
          description: Inventory reserved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Inventory reserved successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /pos/pickup/complete:
    post:
      tags: [POS]
      summary: Complete in-store pickup
      description: Mark an order as picked up from a physical store location
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POSPickupCompletionRequest'
      responses:
        '200':
          description: Pickup completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Pickup completed successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /pos/inventory/deduct:
    post:
      tags: [POS]
      summary: Deduct inventory for direct POS sale
      description: Directly deduct inventory for a POS sale without creating an order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POSDirectSaleRequest'
      responses:
        '200':
          description: Inventory deducted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Direct POS sale processed successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Orders
  /orders:
    get:
      tags: [Orders]
      summary: List orders for current user
      description: Retrieve a list of orders for the currently authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - name: status
          in: query
          schema:
            type: string
            enum: [CREATED, PENDING, PAID, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
          description: Filter by order status
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Orders]
      summary: Create order
      description: Create a new order for the currently authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /orders/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Order ID
    get:
      tags: [Orders]
      summary: Get order by ID
      description: Retrieve a specific order by its ID (user can only access their own orders)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [Orders]
      summary: Update order
      description: Update an existing order (limited fields for customers)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /orders/{id}/cancel:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Order ID
    put:
      tags: [Orders]
      summary: Cancel order
      description: Cancel an existing order (only if not yet shipped)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order cancelled successfully
        '400':
          description: Order cannot be cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Order cannot be cancelled as it has already been shipped
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /orders/{id}/payment:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Order ID
    post:
      tags: [Orders]
      summary: Add payment to order
      description: Add a payment record to an existing order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPaymentRequest'
      responses:
        '200':
          description: Payment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Admin Order Management
  /admin/orders:
    get:
      tags: [Orders]
      summary: List all orders (Admin)
      description: Admin endpoint to list all orders with advanced filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [CREATED, PENDING, PAID, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by user ID
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Filter orders from this date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Filter orders until this date
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/orders/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Order ID
    get:
      tags: [Orders]
      summary: Get order by ID (Admin)
      description: Admin endpoint to get order details by ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [Orders]
      summary: Update order (Admin)
      description: Admin endpoint to update order with full privileges
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateOrderRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/orders/{id}/status:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Order ID
    put:
      tags: [Orders]
      summary: Update order status (Admin)
      description: Admin endpoint to update order status
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [CREATED, PENDING, PAID, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
                trackingNumber:
                  type: string
                  description: Required when status is SHIPPED
                notes:
                  type: string
                  description: Optional notes about the status change
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/orders/{id}/tracking:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Order ID
    put:
      tags: [Orders]
      summary: Add tracking code to order (Admin)
      description: Admin endpoint to add tracking code to an order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - trackingCode
              properties:
                trackingCode:
                  type: string
                  example: "1Z999AA1234567890"
                carrier:
                  type: string
                  example: "UPS"
                notes:
                  type: string
                  example: "Package shipped via UPS Ground"
      responses:
        '200':
          description: Tracking code added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Inventory
  /inventory:
    get:
      tags: [Inventory]
      summary: List inventory items
      description: Retrieve a list of inventory items with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by product ID
        - name: storeId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by store ID
        - name: lowStock
          in: query
          schema:
            type: boolean
          description: Filter items with low stock
      responses:
        '200':
          description: List of inventory items
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryItem'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /inventory/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Inventory item ID
    get:
      tags: [Inventory]
      summary: Get inventory item by ID
      description: Retrieve a specific inventory item by its ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Inventory item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /inventory/{id}/reserve:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Inventory item ID
    post:
      tags: [Inventory]
      summary: Reserve inventory
      description: Reserve a quantity of inventory for an order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
                - orderId
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  example: 5
                orderId:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Inventory reserved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationId:
                    type: string
                    format: uuid
                  message:
                    type: string
                    example: "5 units reserved successfully"
        '400':
          description: Insufficient inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Insufficient inventory. Available: 3, Requested: 5"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /inventory/{id}/release:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Inventory item ID
    post:
      tags: [Inventory]
      summary: Release inventory reservation
      description: Release a previously reserved quantity of inventory
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reservationId
              properties:
                reservationId:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Inventory reservation released successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Reservation released successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >-
        Enter your JWT token in the format **Bearer <token>**
        
        Example: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`
    # Additional schemas for new endpoints
Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        name:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postalCode:
          type: string
        phone:
          type: string
        isDefault:
          type: boolean
        type:
          type: string
          enum: [SHIPPING, BILLING, BOTH]
          default: SHIPPING
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    AddressRequest:
      type: object
      required:
        - name
        - street
        - city
        - country
        - postalCode
      properties:
        name:
          type: string
          example: "John Doe"
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Anytown"
        state:
          type: string
          example: "CA"
        country:
          type: string
          example: "USA"
        postalCode:
          type: string
          example: "12345"
        phone:
          type: string
          example: "+1234567890"
        isDefault:
          type: boolean
          default: false
        type:
          type: string
          enum: [SHIPPING, BILLING, BOTH]
          default: SHIPPING

  schemas:
    Supplier:
      type: object
      properties:
        id:
          type: string
          example: "5f8d3a7e9b8c7d6e5f4a3d2c"
        name:
          type: string
          example: "ABC Distributors"
        contact_person:
          type: string
          example: "John Smith"
        email:
          type: string
          format: email
          example: "contact@abcdistributors.com"
        phone:
          type: string
          example: "+1-555-123-4567"
        address:
          type: string
          example: "123 Supply St"
        city:
          type: string
          example: "Chicago"
        state:
          type: string
          example: "IL"
        country:
          type: string
          example: "USA"
        postal_code:
          type: string
          example: "60601"
        tax_id:
          type: string
          example: "123-456-789"
        website:
          type: string
          example: "https://abcdistributors.com"
        currency:
          type: string
          example: "USD"
        lead_time_days:
          type: integer
          example: 3
        payment_terms:
          type: string
          example: "Net 30"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateSupplierRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "ABC Distributors"
        contact_person:
          type: string
          example: "John Smith"
        email:
          type: string
          format: email
          example: "contact@abcdistributors.com"
        phone:
          type: string
          example: "+1-555-123-4567"
        address:
          type: string
          example: "123 Supply St"
        city:
          type: string
          example: "Chicago"
        state:
          type: string
          example: "IL"
        country:
          type: string
          example: "USA"
        postal_code:
          type: string
          example: "60601"
        tax_id:
          type: string
          example: "123-456-789"
        website:
          type: string
          example: "https://abcdistributors.com"
        currency:
          type: string
          example: "USD"
        lead_time_days:
          type: integer
          example: 3
        payment_terms:
          type: string
          example: "Net 30"

    SupplierAdapter:
      type: object
      properties:
        name:
          type: string
          example: "sample_adapter"
        description:
          type: string
          example: "Sample supplier integration adapter"
        capabilities:
          $ref: '#/components/schemas/AdapterCapabilities'

    AdapterCapabilities:
      type: object
      properties:
        sync_products:
          type: boolean
          example: true
        sync_inventory:
          type: boolean
          example: true
        real_time_inventory:
          type: boolean
          example: false

    AdapterConfig:
      type: object
      properties:
        api_key:
          type: string
          example: "af12b3c4d5e6f7g8h9i0"
        api_url:
          type: string
          example: "https://api.supplier.com/v1"
        additional_settings:
          type: object
          additionalProperties:
            type: string

    SyncOptions:
      type: object
      properties:
        full_sync:
          type: boolean
          description: "Whether to perform a full sync or incremental sync"
          default: false
        batch_size:
          type: integer
          description: "Number of items to process in each batch"
          default: 100
        since:
          type: string
          format: date-time
          description: "Only sync items updated since this timestamp"
        include_inactive:
          type: boolean
          description: "Whether to include inactive items"
          default: false
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: integer
          format: int32
          description: HTTP status code
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        role:
          type: string
          enum: [CUSTOMER, ADMIN, STAFF]
          example: CUSTOMER
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: securePassword123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        role:
          type: string
          enum: [CUSTOMER, ADMIN, STAFF]
          default: CUSTOMER
          example: CUSTOMER

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: securePassword123

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/User'

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        name:
          type: string
          example: Electronics
        description:
          type: string
          example: Electronic devices and components
        parentId:
          type: string
          format: uuid
          nullable: true
          example: 123e4567-e89b-12d3-a456-426614174002
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174003
        name:
          type: string
          example: Premium Widget
        description:
          type: string
          example: High-quality widget for all your needs
        costPrice:
          type: string
          format: decimal
          example: "19.99"
        sellingPrice:
          type: string
          format: decimal
          example: "29.99"
        currency:
          type: string
          default: USD
          example: USD
        sku:
          type: string
          example: WID-001
        barcode:
          type: string
          example: 123456789012
        categoryIds:
          type: array
          items:
            type: string
            format: uuid
          example: ["123e4567-e89b-12d3-a456-426614174001"]
        supplierId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174004
        isActive:
          type: boolean
          example: true
        inStock:
          type: boolean
          example: true
        stockQty:
          type: integer
          example: 100
        lowStockAt:
          type: integer
          example: 10
        imageURLs:
          type: array
          items:
            type: string
            format: uri
          example: ["https://example.com/images/widget.jpg"]
        videoURLs:
          type: array
          items:
            type: string
            format: uri
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            weight: "1.5"
            color: "blue"
            material: "plastic"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174005
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        status:
          type: string
          enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
          example: PROCESSING
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: string
          format: decimal
          example: "99.97"
        currency:
          type: string
          default: USD
          example: USD
        shippingAddress:
          $ref: '#/components/schemas/Address'
        paymentStatus:
          type: string
          enum: [PENDING, PAID, FAILED, REFUNDED, PARTIALLY_REFUNDED]
          example: PAID
        paymentType:
          type: string
          example: CREDIT_CARD
        shippingType:
          type: string
          example: STANDARD
        trackingNumber:
          type: string
          example: 1Z999AA0123456789
        notes:
          type: string
          example: Handle with care
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderItem:
      type: object
      required:
        - productId
        - quantity
        - price
      properties:
        productId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174003
        sku:
          type: string
          example: WID-001
        name:
          type: string
          example: Premium Widget
        quantity:
          type: integer
          minimum: 1
          example: 3
        price:
          type: string
          format: decimal
          example: "29.99"
        totalPrice:
          type: string
          format: decimal
          example: "89.97"

    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174006
        name:
          type: string
          example: Home
        street:
          type: string
          example: 123 Main St
        city:
          type: string
          example: New York
        state:
          type: string
          example: NY
        postalCode:
          type: string
          example: "10001"
        country:
          type: string
          example: United States
        phone:
          type: string
          example: "+1234567890"
        isDefault:
          type: boolean
          example: true

    InventoryItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174003
        sku:
          type: string
          example: WID-001
        productName:
          type: string
          example: Premium Widget
        quantity:
          type: integer
          example: 100
        lowStockAt:
          type: integer
          example: 10
        lastUpdated:
          type: string
          format: date-time

    Supplier:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174007
        name:
          type: string
          example: Acme Corp
        email:
          type: string
          format: email
          example: contact@acmecorp.com
        phone:
          type: string
          example: "+1234567890"
        address:
          type: string
          example: "123 Business St, Industry City"
        contactPerson:
          type: string
          example: John Doe
        isActive:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: integer
          format: int32
          description: HTTP status code
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        role:
          type: string
          enum: [CUSTOMER, ADMIN, STAFF]
          example: CUSTOMER
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        name:
          type: string
          example: Premium Widget
        description:
          type: string
          example: High-quality widget for all your needs
        costPrice:
          type: string
          format: decimal
          example: "19.99"
        sellingPrice:
          type: string
          format: decimal
          example: "29.99"
        currency:
          type: string
          default: USD
          example: USD
        sku:
          type: string
          example: WID-001
        barcode:
          type: string
          example: 123456789012
        isActive:
          type: boolean
          example: true
        inStock:
          type: boolean
          example: true
        stockQty:
          type: integer
          example: 100
        lowStockAt:
          type: integer
          example: 10
        imageURLs:
          type: array
          items:
            type: string
            format: uri
            example: https://example.com/images/widget.jpg
        videoURLs:
          type: array
          items:
            type: string
            format: uri
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            weight: "1.5"
            color: blue

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174002
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
          example: PROCESSING
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: float
          example: 99.97
        currency:
          type: string
          default: USD
          example: USD
        shippingAddress:
          $ref: '#/components/schemas/Address'
        paymentStatus:
          type: string
          enum: [PENDING, PAID, FAILED, REFUNDED, PARTIALLY_REFUNDED]
          example: PAID
        paymentType:
          type: string
          example: CREDIT_CARD
        shippingType:
          type: string
          example: STANDARD
        trackingNumber:
          type: string
          example: 1Z999AA0123456789
        notes:
          type: string
          example: Handle with care
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        sku:
          type: string
        name:
          type: string
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          format: float
        totalPrice:
          type: number
          format: float

    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Home
        street:
          type: string
          example: 123 Main St
        city:
          type: string
          example: New York
        state:
          type: string
          example: NY
        postalCode:
          type: string
          example: "10001"
        country:
          type: string
          example: United States
        phone:
          type: string
          example: "+1234567890"
        isDefault:
          type: boolean
          example: true

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Electronics
        description:
          type: string
          example: Electronic devices and components
        parentId:
          type: string
          format: uuid
          nullable: true
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    InventoryItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        sku:
          type: string
        quantity:
          type: integer
        lowStockThreshold:
          type: integer
        lastUpdated:
          type: string
          format: date-time

    Supplier:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Acme Corp
        contactEmail:
          type: string
          format: email
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    # Request Schemas
    CreateAddressRequest:
      type: object
      required:
        - street
        - city
        - state
        - zipCode
        - country
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        zipCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "USA"
        isDefault:
          type: boolean
          default: false

    UpdateAddressRequest:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        zipCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "USA"
        isDefault:
          type: boolean

    CreateProductRequest:
      type: object
      required:
        - name
        - description
        - price
        - categoryId
      properties:
        name:
          type: string
          example: "Wireless Headphones"
        description:
          type: string
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          format: float
          example: 199.99
        categoryId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        sku:
          type: string
          example: "WH-001"
        brand:
          type: string
          example: "TechBrand"
        specifications:
          type: object
          additionalProperties: true

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          example: "Wireless Headphones"
        description:
          type: string
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          format: float
          example: 199.99
        categoryId:
          type: string
          format: uuid
        sku:
          type: string
          example: "WH-001"
        brand:
          type: string
          example: "TechBrand"
        specifications:
          type: object
          additionalProperties: true

    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Electronics"
        description:
          type: string
          example: "Electronic devices and accessories"
        parentId:
          type: string
          format: uuid
          description: "Parent category ID for subcategories"

    CreateOrderRequest:
      type: object
      required:
        - items
        - shippingAddress
      properties:
        items:
          type: array
          items:
            type: object
            required:
              - productId
              - quantity
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1
              price:
                type: number
                format: float
                description: "Override price if different from product price"
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        notes:
          type: string
          example: "Please deliver after 5 PM"

    UpdateOrderRequest:
      type: object
      properties:
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        notes:
          type: string

    AdminUpdateOrderRequest:
      type: object
      properties:
        status:
          type: string
          enum: [CREATED, PENDING, PAID, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        notes:
          type: string
        trackingNumber:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1
              price:
                type: number
                format: float

    AddPaymentRequest:
      type: object
      required:
        - amount
        - paymentMethod
      properties:
        amount:
          type: number
          format: float
          example: 199.99
        paymentMethod:
          type: string
          enum: [CREDIT_CARD, DEBIT_CARD, PAYPAL, BANK_TRANSFER, CASH]
          example: "CREDIT_CARD"
        transactionId:
          type: string
          example: "tx_123456789"
        paymentDetails:
          type: object
          additionalProperties: true
          description: "Additional payment-specific details"

    POSOrderRequest:
      type: object
      required:
        - items
        - storeId
      properties:
        items:
          type: array
          items:
            type: object
            required:
              - productId
              - quantity
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1
              price:
                type: number
                format: float
        storeId:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
          description: "Optional customer ID for registered customers"
        paymentMethod:
          type: string
          enum: [CASH, CREDIT_CARD, DEBIT_CARD]
        notes:
          type: string

    POSQuickTransactionRequest:
      type: object
      required:
        - items
        - storeId
        - paymentMethod
        - totalAmount
      properties:
        items:
          type: array
          items:
            type: object
            required:
              - productId
              - quantity
              - price
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1
              price:
                type: number
                format: float
        storeId:
          type: string
          format: uuid
        paymentMethod:
          type: string
          enum: [CASH, CREDIT_CARD, DEBIT_CARD]
        totalAmount:
          type: number
          format: float
        customerId:
          type: string
          format: uuid
          description: "Optional customer ID"
        notes:
          type: string

    POSPickupCompletionRequest:
      type: object
      required:
        - orderId
      properties:
        orderId:
          type: string
          format: uuid
        notes:
          type: string
          example: "Customer picked up order successfully"
        completedBy:
          type: string
          description: "Staff member who completed the pickup"

    POSDirectSaleRequest:
      type: object
      required:
        - productId
        - quantity
        - storeId
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
        storeId:
          type: string
          format: uuid
        reason:
          type: string
          example: "Direct POS sale"
        staffId:
          type: string
          format: uuid
          description: "Staff member processing the sale"

  parameters:
    pageParam:
      name: page
      in: query
      description: Page number (1-based)
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSizeParam:
      name: pageSize
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    sortParam:
      name: sort
      in: query
      description: Field to sort by
      required: false
      schema:
        type: string
    orderParam:
      name: order
      in: query
      description: Sort order (asc/desc)
      required: false
      schema:
        type: string
        enum: [asc, desc]
        default: asc

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Unauthorized: Invalid or missing token"
            code: 401
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Resource not found"
            code: 404
            
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"
            code: 500
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Validation failed"
            code: 400
            details:
              - field: "email"
                message: "Must be a valid email address"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Resource already exists"
            code: 409
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"
            code: 500

  parameters:
    idPathParam:
      name: id
      in: path
      description: Resource ID
      required: true
      schema:
        type: string
        format: uuid
    limitQueryParam:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    offsetQueryParam:
      name: offset
      in: query
      description: Number of items to skip
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    sortQueryParam:
      name: sort
      in: query
      description: Field to sort by
      required: false
      schema:
        type: string
        example: "createdAt"
    orderQueryParam:
      name: order
      in: query
      description: Sort order (asc/desc)
      required: false
      schema:
        type: string
        enum: [asc, desc]
        default: desc
        example: desc

  requestBodies:
    RegisterRequest:
      description: User registration data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterRequest'
    LoginRequest:
      description: User login credentials
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginRequest'
    ProductRequest:
      description: Product data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    OrderRequest:
      description: Order data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'

paths:
  # Authentication
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Email already in use"
                code: 409

    post:
      tags: [Authentication]
      summary: Authenticate user and get JWT token
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid email or password"
                code: 401

  # Users
    get:
      tags: [Users]
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [Users]
      summary: Update current user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [Users]
      summary: Change current user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      tags: [Users]
      summary: Get current user addresses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Users]
      summary: Add a new address for current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '201':
          description: Address added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    parameters:
      - $ref: '#/components/parameters/idPathParam'
    put:
      tags: [Users]
      summary: Update an address for current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Users]
      summary: Delete an address for current user
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Address deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/me/addresses/default/{id}:
    parameters:
      - $ref: '#/components/parameters/idPathParam'
    put:
      tags: [Users]
      summary: Set default address for current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default address set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Products
    get:
      tags: [Products]
      summary: List all products
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/offsetQueryParam'
        - $ref: '#/components/parameters/sortQueryParam'
        - $ref: '#/components/parameters/orderQueryParam'
        - name: category
          in: query
          description: Filter by category ID
          schema:
            type: string
            format: uuid
        - name: inStock
          in: query
          description: Filter by in-stock status
          schema:
            type: boolean
        - name: search
          in: query
          description: Search term for product name or description
          schema:
            type: string
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Products]
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    parameters:
      - $ref: '#/components/parameters/idPathParam'
    get:
      tags: [Products]
      summary: Get a product by ID
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Products]
      summary: Update a product
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Products]
      summary: Delete a product
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Categories
    get:
      tags: [Categories]
      summary: List all categories
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/offsetQueryParam'
        - name: parentId
          in: query
          description: Filter by parent category ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  total:
                    type: integer
                    example: 1

    post:
      tags: [Categories]
      summary: Create a new category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Electronics
                description:
                  type: string
                  example: Electronic devices and components
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                  example: null
                isActive:
                  type: boolean
                  default: true
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    parameters:
      - $ref: '#/components/parameters/idPathParam'
    get:
      tags: [Categories]
      summary: Get a category by ID
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Categories]
      summary: Update a category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Electronics
                description:
                  type: string
                  example: Updated description
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                isActive:
                  type: boolean
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Categories]
      summary: Delete a category
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Category deleted successfully
        '400':
          description: Cannot delete category with products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Cannot delete category with associated products"
                code: 400
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Orders
    get:
      tags: [Orders]
      summary: List all orders
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/offsetQueryParam'
        - $ref: '#/components/parameters/sortQueryParam'
        - $ref: '#/components/parameters/orderQueryParam'
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
        - name: userId
          in: query
          description: Filter by user ID (admin only)
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags: [Orders]
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/OrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    parameters:
      - $ref: '#/components/parameters/idPathParam'
    get:
      tags: [Orders]
      summary: Get an order by ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /orders/{id}/status:
    parameters:
      - $ref: '#/components/parameters/idPathParam'
    put:
      tags: [Orders]
      summary: Update order status
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
                  example: SHIPPED
                trackingNumber:
                  type: string
                  example: 1Z999AA0123456789
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    parameters:
      - $ref: '#/components/parameters/idPathParam'
    post:
      tags: [Orders]
      summary: Cancel an order
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Cannot cancel order in current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Cannot cancel order in current status"
                code: 400
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # User Orders
  /users/me/orders:
    get:
      tags: [Users, Orders]
      summary: Get current user's orders
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/offsetQueryParam'
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
      responses:
        '200':
          description: List of user's orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  total:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 20
                  offset:
                    type: integer
                    example: 0
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Inventory
    get:
      tags: [Inventory]
      summary: List inventory items
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/offsetQueryParam'
        - name: lowStock
          in: query
          description: Filter low stock items only
          schema:
            type: boolean
        - name: productId
          in: query
          description: Filter by product ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of inventory items
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryItem'
                  total:
                    type: integer
                    example: 1
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    parameters:
      - name: productId
        in: path
        description: Product ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Inventory]
      summary: Get inventory item by product ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Inventory item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Inventory]
      summary: Update inventory item
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 0
                  example: 50
                lowStockAt:
                  type: integer
                  minimum: 0
                  example: 10
      responses:
        '200':
          description: Inventory updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
