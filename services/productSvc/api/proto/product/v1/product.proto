syntax = "proto3";

package product.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/leonvanderhaeghen/stockplatform/gen/go/product/v1;productv1";

// Category represents a product category
message Category {
  string id = 1;
  string name = 2;
  string description = 3;
  string parent_id = 4;  // Optional parent category ID
  int32 level = 5;       // Category level in the hierarchy (0 for root categories)
  string path = 6;      // Path in the category tree (e.g., "electronics/computers/laptops")
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// Product represents an item in the inventory
message Product {
  string id = 1;
  string name = 2;
  string description = 3;
  string cost_price = 4;     // Cost price as a string for decimal precision
  string selling_price = 5;  // Selling price as a string for decimal precision
  string currency = 6;       // ISO 4217 currency code
  string sku = 7;
  string barcode = 8;
  repeated string category_ids = 9;  // Multiple category support
  string supplier_id = 10;
  bool is_active = 11;
  bool in_stock = 12;
  int32 stock_qty = 13;
  int32 low_stock_at = 14;
  repeated string image_urls = 15;
  repeated string video_urls = 16;
  map<string, string> metadata = 17;  // Flexible metadata field
  google.protobuf.Timestamp created_at = 18;
  google.protobuf.Timestamp updated_at = 19;
  google.protobuf.Timestamp deleted_at = 20;  // For soft deletes
  // Enriched categories returned to clients (server should populate from category_ids)
  repeated Category categories = 21;
}

// Request to create a new product
message CreateProductRequest {
  string name = 1;
  string description = 2;
  string cost_price = 3;     // Cost price as a string for decimal precision
  string selling_price = 4;  // Selling price as a string for decimal precision
  string currency = 5;       // ISO 4217 currency code
  string sku = 6;
  string barcode = 7;
  repeated string category_ids = 8;  // Multiple category support
  string supplier_id = 9;
  bool is_active = 10;
  bool in_stock = 11;
  int32 stock_qty = 12;
  int32 low_stock_at = 13;
  repeated string image_urls = 14;
  repeated string video_urls = 15;
  map<string, string> metadata = 16;  // Flexible metadata field
}

// Response containing the created product
message CreateProductResponse {
  Product product = 1;
}

// Request to get a product by ID
message GetProductRequest {
  string id = 1;
}

// Response containing the requested product
message GetProductResponse {
  Product product = 1;
}

// Filter conditions for listing products
message ProductFilter {
  repeated string ids = 1;              // Filter by product IDs
  repeated string category_ids = 2;     // Filter by category IDs
  double min_price = 3;                 // Minimum price (inclusive)
  double max_price = 4;                 // Maximum price (inclusive)
  string search_term = 5;               // Search term for name or description
  string store_id = 6;                  // Filter by store availability
  bool available_in_store_only = 7;     // Only show products available in stores
}

// Sorting options for listing products
message ProductSort {
  enum SortField {
    SORT_FIELD_UNSPECIFIED = 0;
    SORT_FIELD_NAME = 1;
    SORT_FIELD_PRICE = 2;
    SORT_FIELD_CREATED_AT = 3;
    SORT_FIELD_UPDATED_AT = 4;
  }

  enum SortOrder {
    SORT_ORDER_UNSPECIFIED = 0;
    SORT_ORDER_ASC = 1;
    SORT_ORDER_DESC = 2;
  }

  SortField field = 1;
  SortOrder order = 2;
}

// Pagination parameters
message Pagination {
  int32 page = 1;         // Page number (1-based)
  int32 page_size = 2;    // Number of items per page
}

// Request to list products with filtering and sorting
message ListProductsRequest {
  ProductFilter filter = 1;      // Optional filter criteria
  ProductSort sort = 2;          // Optional sorting criteria
  Pagination pagination = 3;     // Optional pagination
  string requesting_user_id = 4; // User making the request (for store-specific access)
}

// Response containing a list of products with pagination info
message ListProductsResponse {
  repeated Product products = 1;  // List of products
  int32 total_count = 2;         // Total number of products matching the filter
  int32 page = 3;                // Current page number
  int32 page_size = 4;           // Number of items per page
}

// Request to list all categories
message ListCategoriesRequest {
  string parent_id = 1;  // Optional parent category ID to filter by
  int32 depth = 2;       // Maximum depth of subcategories to return (0 for all)
}

// Response containing a list of categories
message ListCategoriesResponse {
  repeated Category categories = 1;
}

// Request to create a new category
message CreateCategoryRequest {
  string name = 1;         // Required category name
  string description = 2;  // Optional description
  string parent_id = 3;    // Optional parent category ID
  bool is_active = 4;      // Whether the category is active
}

// Response containing the created category
message CreateCategoryResponse {
  Category category = 1;
}

// ExportProductsRequest is the request for exporting products to CSV
message ExportProductsRequest {
  ProductFilter filter = 1; // Optional filter criteria
  string format = 2; // "csv" for now, could support others later
  string requesting_user_id = 3; // User making the request (for store-specific access)
}

// ExportProductsResponse is the response for exporting products
message ExportProductsResponse {
  bytes data = 1; // CSV data
  string filename = 2;
  string content_type = 3;
}

// GetStoreAvailableProductsRequest is the request for getting products available in a store
message GetStoreAvailableProductsRequest {
  string store_id = 1;
  ProductFilter filter = 2; // Additional filtering
  ProductSort sort = 3;
  Pagination pagination = 4;
}

// GetStoreAvailableProductsResponse is the response for store available products
message GetStoreAvailableProductsResponse {
  repeated Product products = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

// Product service definition
service ProductService {
  // Create a new product
  rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse);

  // Get a product by ID
  rpc GetProduct(GetProductRequest) returns (GetProductResponse);
  
  // List products with filtering and sorting
  rpc ListProducts(ListProductsRequest) returns (ListProductsResponse);
  
  // List all product categories
  rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse);
  
  // Create a new product category
  rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse);
  
  // Export products to CSV format
  rpc ExportProducts(ExportProductsRequest) returns (ExportProductsResponse);
  
  // Get products available in a specific store
  rpc GetStoreAvailableProducts(GetStoreAvailableProductsRequest) returns (GetStoreAvailableProductsResponse);
}
