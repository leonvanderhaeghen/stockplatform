// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: inventory/v1/inventory.proto

package inventoryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_CreateInventory_FullMethodName         = "/inventory.v1.InventoryService/CreateInventory"
	InventoryService_GetInventory_FullMethodName            = "/inventory.v1.InventoryService/GetInventory"
	InventoryService_GetInventoryByProductID_FullMethodName = "/inventory.v1.InventoryService/GetInventoryByProductID"
	InventoryService_GetInventoryBySKU_FullMethodName       = "/inventory.v1.InventoryService/GetInventoryBySKU"
	InventoryService_UpdateInventory_FullMethodName         = "/inventory.v1.InventoryService/UpdateInventory"
	InventoryService_DeleteInventory_FullMethodName         = "/inventory.v1.InventoryService/DeleteInventory"
	InventoryService_ListInventory_FullMethodName           = "/inventory.v1.InventoryService/ListInventory"
	InventoryService_ListInventoryByLocation_FullMethodName = "/inventory.v1.InventoryService/ListInventoryByLocation"
	InventoryService_AddStock_FullMethodName                = "/inventory.v1.InventoryService/AddStock"
	InventoryService_RemoveStock_FullMethodName             = "/inventory.v1.InventoryService/RemoveStock"
	InventoryService_ReserveStock_FullMethodName            = "/inventory.v1.InventoryService/ReserveStock"
	InventoryService_ReleaseReservation_FullMethodName      = "/inventory.v1.InventoryService/ReleaseReservation"
	InventoryService_FulfillReservation_FullMethodName      = "/inventory.v1.InventoryService/FulfillReservation"
	InventoryService_CreateLocation_FullMethodName          = "/inventory.v1.InventoryService/CreateLocation"
	InventoryService_GetLocation_FullMethodName             = "/inventory.v1.InventoryService/GetLocation"
	InventoryService_UpdateLocation_FullMethodName          = "/inventory.v1.InventoryService/UpdateLocation"
	InventoryService_DeleteLocation_FullMethodName          = "/inventory.v1.InventoryService/DeleteLocation"
	InventoryService_ListLocations_FullMethodName           = "/inventory.v1.InventoryService/ListLocations"
	InventoryService_CreateTransfer_FullMethodName          = "/inventory.v1.InventoryService/CreateTransfer"
	InventoryService_GetTransfer_FullMethodName             = "/inventory.v1.InventoryService/GetTransfer"
	InventoryService_UpdateTransferStatus_FullMethodName    = "/inventory.v1.InventoryService/UpdateTransferStatus"
	InventoryService_ListTransfers_FullMethodName           = "/inventory.v1.InventoryService/ListTransfers"
	InventoryService_CheckAvailability_FullMethodName       = "/inventory.v1.InventoryService/CheckAvailability"
	InventoryService_GetNearbyInventory_FullMethodName      = "/inventory.v1.InventoryService/GetNearbyInventory"
	InventoryService_ReserveForPickup_FullMethodName        = "/inventory.v1.InventoryService/ReserveForPickup"
	InventoryService_CompletePickup_FullMethodName          = "/inventory.v1.InventoryService/CompletePickup"
	InventoryService_CancelPickup_FullMethodName            = "/inventory.v1.InventoryService/CancelPickup"
	InventoryService_AdjustInventoryForOrder_FullMethodName = "/inventory.v1.InventoryService/AdjustInventoryForOrder"
	InventoryService_GetInventoryHistory_FullMethodName     = "/inventory.v1.InventoryService/GetInventoryHistory"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InventoryService provides operations for managing inventory
type InventoryServiceClient interface {
	// CreateInventory creates a new inventory item
	CreateInventory(ctx context.Context, in *CreateInventoryRequest, opts ...grpc.CallOption) (*CreateInventoryResponse, error)
	// GetInventory retrieves an inventory item by ID
	GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	// GetInventoryByProductID retrieves an inventory item by product ID
	GetInventoryByProductID(ctx context.Context, in *GetInventoryByProductIDRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	// GetInventoryBySKU retrieves an inventory item by SKU
	GetInventoryBySKU(ctx context.Context, in *GetInventoryBySKURequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	// UpdateInventory updates an existing inventory item
	UpdateInventory(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*UpdateInventoryResponse, error)
	// DeleteInventory removes an inventory item
	DeleteInventory(ctx context.Context, in *DeleteInventoryRequest, opts ...grpc.CallOption) (*DeleteInventoryResponse, error)
	// ListInventory lists all inventory items with pagination
	ListInventory(ctx context.Context, in *ListInventoryRequest, opts ...grpc.CallOption) (*ListInventoryResponse, error)
	// ListInventoryByLocation lists inventory items for a specific location
	ListInventoryByLocation(ctx context.Context, in *ListInventoryByLocationRequest, opts ...grpc.CallOption) (*ListInventoryResponse, error)
	// AddStock adds stock to an inventory item
	AddStock(ctx context.Context, in *AddStockRequest, opts ...grpc.CallOption) (*AddStockResponse, error)
	// RemoveStock removes stock from an inventory item
	RemoveStock(ctx context.Context, in *RemoveStockRequest, opts ...grpc.CallOption) (*RemoveStockResponse, error)
	// ReserveStock reserves stock for an order
	ReserveStock(ctx context.Context, in *ReserveStockRequest, opts ...grpc.CallOption) (*ReserveStockResponse, error)
	// ReleaseReservation releases a reservation without fulfilling it
	ReleaseReservation(ctx context.Context, in *ReleaseReservationRequest, opts ...grpc.CallOption) (*ReleaseReservationResponse, error)
	// FulfillReservation completes a reservation and deducts from stock
	FulfillReservation(ctx context.Context, in *FulfillReservationRequest, opts ...grpc.CallOption) (*FulfillReservationResponse, error)
	// CreateLocation creates a new store location
	CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
	// GetLocation retrieves a store location by ID
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	// UpdateLocation updates an existing store location
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error)
	// DeleteLocation removes a store location
	DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationResponse, error)
	// ListLocations lists all store locations with pagination
	ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
	// CreateTransfer creates a new inventory transfer between locations
	CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*CreateTransferResponse, error)
	// GetTransfer retrieves an inventory transfer by ID
	GetTransfer(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*GetTransferResponse, error)
	// UpdateTransferStatus updates the status of a transfer
	UpdateTransferStatus(ctx context.Context, in *UpdateTransferStatusRequest, opts ...grpc.CallOption) (*UpdateTransferStatusResponse, error)
	// ListTransfers lists transfers with pagination and filters
	ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	// CheckAvailability checks item availability at a specific location
	CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error)
	// GetNearbyInventory finds inventory availability at nearby locations
	GetNearbyInventory(ctx context.Context, in *GetNearbyInventoryRequest, opts ...grpc.CallOption) (*GetNearbyInventoryResponse, error)
	// ReserveForPickup reserves inventory for in-store pickup
	ReserveForPickup(ctx context.Context, in *ReserveForPickupRequest, opts ...grpc.CallOption) (*ReserveForPickupResponse, error)
	// CompletePickup completes an in-store pickup
	CompletePickup(ctx context.Context, in *CompletePickupRequest, opts ...grpc.CallOption) (*CompletePickupResponse, error)
	// CancelPickup cancels an in-store pickup reservation
	CancelPickup(ctx context.Context, in *CancelPickupRequest, opts ...grpc.CallOption) (*CancelPickupResponse, error)
	// AdjustInventoryForOrder adjusts inventory based on order operations (called by order service)
	AdjustInventoryForOrder(ctx context.Context, in *AdjustInventoryForOrderRequest, opts ...grpc.CallOption) (*AdjustInventoryForOrderResponse, error)
	// GetInventoryHistory retrieves the history of changes for a specific inventory item
	GetInventoryHistory(ctx context.Context, in *GetInventoryHistoryRequest, opts ...grpc.CallOption) (*GetInventoryHistoryResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CreateInventory(ctx context.Context, in *CreateInventoryRequest, opts ...grpc.CallOption) (*CreateInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetInventoryByProductID(ctx context.Context, in *GetInventoryByProductIDRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetInventoryByProductID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetInventoryBySKU(ctx context.Context, in *GetInventoryBySKURequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetInventoryBySKU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateInventory(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*UpdateInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteInventory(ctx context.Context, in *DeleteInventoryRequest, opts ...grpc.CallOption) (*DeleteInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_DeleteInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListInventory(ctx context.Context, in *ListInventoryRequest, opts ...grpc.CallOption) (*ListInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListInventoryByLocation(ctx context.Context, in *ListInventoryByLocationRequest, opts ...grpc.CallOption) (*ListInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListInventoryByLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AddStock(ctx context.Context, in *AddStockRequest, opts ...grpc.CallOption) (*AddStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStockResponse)
	err := c.cc.Invoke(ctx, InventoryService_AddStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) RemoveStock(ctx context.Context, in *RemoveStockRequest, opts ...grpc.CallOption) (*RemoveStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStockResponse)
	err := c.cc.Invoke(ctx, InventoryService_RemoveStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReserveStock(ctx context.Context, in *ReserveStockRequest, opts ...grpc.CallOption) (*ReserveStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveStockResponse)
	err := c.cc.Invoke(ctx, InventoryService_ReserveStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReleaseReservation(ctx context.Context, in *ReleaseReservationRequest, opts ...grpc.CallOption) (*ReleaseReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseReservationResponse)
	err := c.cc.Invoke(ctx, InventoryService_ReleaseReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FulfillReservation(ctx context.Context, in *FulfillReservationRequest, opts ...grpc.CallOption) (*FulfillReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FulfillReservationResponse)
	err := c.cc.Invoke(ctx, InventoryService_FulfillReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLocationResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLocationResponse)
	err := c.cc.Invoke(ctx, InventoryService_DeleteLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*CreateTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransferResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetTransfer(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*GetTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransferResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateTransferStatus(ctx context.Context, in *UpdateTransferStatusRequest, opts ...grpc.CallOption) (*UpdateTransferStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTransferStatusResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateTransferStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAvailabilityResponse)
	err := c.cc.Invoke(ctx, InventoryService_CheckAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetNearbyInventory(ctx context.Context, in *GetNearbyInventoryRequest, opts ...grpc.CallOption) (*GetNearbyInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNearbyInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetNearbyInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReserveForPickup(ctx context.Context, in *ReserveForPickupRequest, opts ...grpc.CallOption) (*ReserveForPickupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveForPickupResponse)
	err := c.cc.Invoke(ctx, InventoryService_ReserveForPickup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CompletePickup(ctx context.Context, in *CompletePickupRequest, opts ...grpc.CallOption) (*CompletePickupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompletePickupResponse)
	err := c.cc.Invoke(ctx, InventoryService_CompletePickup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CancelPickup(ctx context.Context, in *CancelPickupRequest, opts ...grpc.CallOption) (*CancelPickupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPickupResponse)
	err := c.cc.Invoke(ctx, InventoryService_CancelPickup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AdjustInventoryForOrder(ctx context.Context, in *AdjustInventoryForOrderRequest, opts ...grpc.CallOption) (*AdjustInventoryForOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustInventoryForOrderResponse)
	err := c.cc.Invoke(ctx, InventoryService_AdjustInventoryForOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetInventoryHistory(ctx context.Context, in *GetInventoryHistoryRequest, opts ...grpc.CallOption) (*GetInventoryHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryHistoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetInventoryHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations should embed UnimplementedInventoryServiceServer
// for forward compatibility.
//
// InventoryService provides operations for managing inventory
type InventoryServiceServer interface {
	// CreateInventory creates a new inventory item
	CreateInventory(context.Context, *CreateInventoryRequest) (*CreateInventoryResponse, error)
	// GetInventory retrieves an inventory item by ID
	GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error)
	// GetInventoryByProductID retrieves an inventory item by product ID
	GetInventoryByProductID(context.Context, *GetInventoryByProductIDRequest) (*GetInventoryResponse, error)
	// GetInventoryBySKU retrieves an inventory item by SKU
	GetInventoryBySKU(context.Context, *GetInventoryBySKURequest) (*GetInventoryResponse, error)
	// UpdateInventory updates an existing inventory item
	UpdateInventory(context.Context, *UpdateInventoryRequest) (*UpdateInventoryResponse, error)
	// DeleteInventory removes an inventory item
	DeleteInventory(context.Context, *DeleteInventoryRequest) (*DeleteInventoryResponse, error)
	// ListInventory lists all inventory items with pagination
	ListInventory(context.Context, *ListInventoryRequest) (*ListInventoryResponse, error)
	// ListInventoryByLocation lists inventory items for a specific location
	ListInventoryByLocation(context.Context, *ListInventoryByLocationRequest) (*ListInventoryResponse, error)
	// AddStock adds stock to an inventory item
	AddStock(context.Context, *AddStockRequest) (*AddStockResponse, error)
	// RemoveStock removes stock from an inventory item
	RemoveStock(context.Context, *RemoveStockRequest) (*RemoveStockResponse, error)
	// ReserveStock reserves stock for an order
	ReserveStock(context.Context, *ReserveStockRequest) (*ReserveStockResponse, error)
	// ReleaseReservation releases a reservation without fulfilling it
	ReleaseReservation(context.Context, *ReleaseReservationRequest) (*ReleaseReservationResponse, error)
	// FulfillReservation completes a reservation and deducts from stock
	FulfillReservation(context.Context, *FulfillReservationRequest) (*FulfillReservationResponse, error)
	// CreateLocation creates a new store location
	CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error)
	// GetLocation retrieves a store location by ID
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	// UpdateLocation updates an existing store location
	UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error)
	// DeleteLocation removes a store location
	DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationResponse, error)
	// ListLocations lists all store locations with pagination
	ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error)
	// CreateTransfer creates a new inventory transfer between locations
	CreateTransfer(context.Context, *CreateTransferRequest) (*CreateTransferResponse, error)
	// GetTransfer retrieves an inventory transfer by ID
	GetTransfer(context.Context, *GetTransferRequest) (*GetTransferResponse, error)
	// UpdateTransferStatus updates the status of a transfer
	UpdateTransferStatus(context.Context, *UpdateTransferStatusRequest) (*UpdateTransferStatusResponse, error)
	// ListTransfers lists transfers with pagination and filters
	ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error)
	// CheckAvailability checks item availability at a specific location
	CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error)
	// GetNearbyInventory finds inventory availability at nearby locations
	GetNearbyInventory(context.Context, *GetNearbyInventoryRequest) (*GetNearbyInventoryResponse, error)
	// ReserveForPickup reserves inventory for in-store pickup
	ReserveForPickup(context.Context, *ReserveForPickupRequest) (*ReserveForPickupResponse, error)
	// CompletePickup completes an in-store pickup
	CompletePickup(context.Context, *CompletePickupRequest) (*CompletePickupResponse, error)
	// CancelPickup cancels an in-store pickup reservation
	CancelPickup(context.Context, *CancelPickupRequest) (*CancelPickupResponse, error)
	// AdjustInventoryForOrder adjusts inventory based on order operations (called by order service)
	AdjustInventoryForOrder(context.Context, *AdjustInventoryForOrderRequest) (*AdjustInventoryForOrderResponse, error)
	// GetInventoryHistory retrieves the history of changes for a specific inventory item
	GetInventoryHistory(context.Context, *GetInventoryHistoryRequest) (*GetInventoryHistoryResponse, error)
}

// UnimplementedInventoryServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) CreateInventory(context.Context, *CreateInventoryRequest) (*CreateInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventory not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventoryByProductID(context.Context, *GetInventoryByProductIDRequest) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryByProductID not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventoryBySKU(context.Context, *GetInventoryBySKURequest) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryBySKU not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateInventory(context.Context, *UpdateInventoryRequest) (*UpdateInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInventory not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteInventory(context.Context, *DeleteInventoryRequest) (*DeleteInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ListInventory(context.Context, *ListInventoryRequest) (*ListInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ListInventoryByLocation(context.Context, *ListInventoryByLocationRequest) (*ListInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInventoryByLocation not implemented")
}
func (UnimplementedInventoryServiceServer) AddStock(context.Context, *AddStockRequest) (*AddStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStock not implemented")
}
func (UnimplementedInventoryServiceServer) RemoveStock(context.Context, *RemoveStockRequest) (*RemoveStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStock not implemented")
}
func (UnimplementedInventoryServiceServer) ReserveStock(context.Context, *ReserveStockRequest) (*ReserveStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveStock not implemented")
}
func (UnimplementedInventoryServiceServer) ReleaseReservation(context.Context, *ReleaseReservationRequest) (*ReleaseReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseReservation not implemented")
}
func (UnimplementedInventoryServiceServer) FulfillReservation(context.Context, *FulfillReservationRequest) (*FulfillReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfillReservation not implemented")
}
func (UnimplementedInventoryServiceServer) CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedInventoryServiceServer) GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (UnimplementedInventoryServiceServer) ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransfer(context.Context, *CreateTransferRequest) (*CreateTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}
func (UnimplementedInventoryServiceServer) GetTransfer(context.Context, *GetTransferRequest) (*GetTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfer not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateTransferStatus(context.Context, *UpdateTransferStatusRequest) (*UpdateTransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransferStatus not implemented")
}
func (UnimplementedInventoryServiceServer) ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (UnimplementedInventoryServiceServer) CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedInventoryServiceServer) GetNearbyInventory(context.Context, *GetNearbyInventoryRequest) (*GetNearbyInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ReserveForPickup(context.Context, *ReserveForPickupRequest) (*ReserveForPickupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveForPickup not implemented")
}
func (UnimplementedInventoryServiceServer) CompletePickup(context.Context, *CompletePickupRequest) (*CompletePickupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePickup not implemented")
}
func (UnimplementedInventoryServiceServer) CancelPickup(context.Context, *CancelPickupRequest) (*CancelPickupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPickup not implemented")
}
func (UnimplementedInventoryServiceServer) AdjustInventoryForOrder(context.Context, *AdjustInventoryForOrderRequest) (*AdjustInventoryForOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustInventoryForOrder not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventoryHistory(context.Context, *GetInventoryHistoryRequest) (*GetInventoryHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryHistory not implemented")
}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue() {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CreateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateInventory(ctx, req.(*CreateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventory(ctx, req.(*GetInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetInventoryByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryByProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventoryByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventoryByProductID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventoryByProductID(ctx, req.(*GetInventoryByProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetInventoryBySKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryBySKURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventoryBySKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventoryBySKU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventoryBySKU(ctx, req.(*GetInventoryBySKURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateInventory(ctx, req.(*UpdateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteInventory(ctx, req.(*DeleteInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListInventory(ctx, req.(*ListInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListInventoryByLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInventoryByLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListInventoryByLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListInventoryByLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListInventoryByLocation(ctx, req.(*ListInventoryByLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AddStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddStock(ctx, req.(*AddStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_RemoveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).RemoveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_RemoveStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).RemoveStock(ctx, req.(*RemoveStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReserveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReserveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReserveStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReserveStock(ctx, req.(*ReserveStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReleaseReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReleaseReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReleaseReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReleaseReservation(ctx, req.(*ReleaseReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FulfillReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FulfillReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FulfillReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_FulfillReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FulfillReservation(ctx, req.(*FulfillReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateLocation(ctx, req.(*CreateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteLocation(ctx, req.(*DeleteLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListLocations(ctx, req.(*ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransfer(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetTransfer(ctx, req.(*GetTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateTransferStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateTransferStatus(ctx, req.(*UpdateTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListTransfers(ctx, req.(*ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CheckAvailability(ctx, req.(*CheckAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetNearbyInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearbyInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetNearbyInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetNearbyInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetNearbyInventory(ctx, req.(*GetNearbyInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReserveForPickup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveForPickupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReserveForPickup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReserveForPickup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReserveForPickup(ctx, req.(*ReserveForPickupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CompletePickup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletePickupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CompletePickup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CompletePickup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CompletePickup(ctx, req.(*CompletePickupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CancelPickup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPickupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CancelPickup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CancelPickup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CancelPickup(ctx, req.(*CancelPickupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AdjustInventoryForOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustInventoryForOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AdjustInventoryForOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AdjustInventoryForOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AdjustInventoryForOrder(ctx, req.(*AdjustInventoryForOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetInventoryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventoryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventoryHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventoryHistory(ctx, req.(*GetInventoryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInventory",
			Handler:    _InventoryService_CreateInventory_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _InventoryService_GetInventory_Handler,
		},
		{
			MethodName: "GetInventoryByProductID",
			Handler:    _InventoryService_GetInventoryByProductID_Handler,
		},
		{
			MethodName: "GetInventoryBySKU",
			Handler:    _InventoryService_GetInventoryBySKU_Handler,
		},
		{
			MethodName: "UpdateInventory",
			Handler:    _InventoryService_UpdateInventory_Handler,
		},
		{
			MethodName: "DeleteInventory",
			Handler:    _InventoryService_DeleteInventory_Handler,
		},
		{
			MethodName: "ListInventory",
			Handler:    _InventoryService_ListInventory_Handler,
		},
		{
			MethodName: "ListInventoryByLocation",
			Handler:    _InventoryService_ListInventoryByLocation_Handler,
		},
		{
			MethodName: "AddStock",
			Handler:    _InventoryService_AddStock_Handler,
		},
		{
			MethodName: "RemoveStock",
			Handler:    _InventoryService_RemoveStock_Handler,
		},
		{
			MethodName: "ReserveStock",
			Handler:    _InventoryService_ReserveStock_Handler,
		},
		{
			MethodName: "ReleaseReservation",
			Handler:    _InventoryService_ReleaseReservation_Handler,
		},
		{
			MethodName: "FulfillReservation",
			Handler:    _InventoryService_FulfillReservation_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _InventoryService_CreateLocation_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _InventoryService_GetLocation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _InventoryService_UpdateLocation_Handler,
		},
		{
			MethodName: "DeleteLocation",
			Handler:    _InventoryService_DeleteLocation_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _InventoryService_ListLocations_Handler,
		},
		{
			MethodName: "CreateTransfer",
			Handler:    _InventoryService_CreateTransfer_Handler,
		},
		{
			MethodName: "GetTransfer",
			Handler:    _InventoryService_GetTransfer_Handler,
		},
		{
			MethodName: "UpdateTransferStatus",
			Handler:    _InventoryService_UpdateTransferStatus_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _InventoryService_ListTransfers_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _InventoryService_CheckAvailability_Handler,
		},
		{
			MethodName: "GetNearbyInventory",
			Handler:    _InventoryService_GetNearbyInventory_Handler,
		},
		{
			MethodName: "ReserveForPickup",
			Handler:    _InventoryService_ReserveForPickup_Handler,
		},
		{
			MethodName: "CompletePickup",
			Handler:    _InventoryService_CompletePickup_Handler,
		},
		{
			MethodName: "CancelPickup",
			Handler:    _InventoryService_CancelPickup_Handler,
		},
		{
			MethodName: "AdjustInventoryForOrder",
			Handler:    _InventoryService_AdjustInventoryForOrder_Handler,
		},
		{
			MethodName: "GetInventoryHistory",
			Handler:    _InventoryService_GetInventoryHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory/v1/inventory.proto",
}
