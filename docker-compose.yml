# Docker Compose file for Stock Platform
# Using BuildKit for improved build performance
# Set DOCKER_BUILDKIT=1 in your environment to enable BuildKit

services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: stockplatform-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=stockplatform
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stockplatform-network

  # MongoDB Express (Web UI)
  mongo-express:
    image: mongo-express:latest
    container_name: stockplatform-mongo-express
    restart: unless-stopped
    ports:
      - "8083:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=stockplatform-mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    volumes:
      - ./docker/mongo-express/custom-entrypoint.sh:/custom-entrypoint.sh
    entrypoint: ["/bin/sh", "-c", "chmod +x /custom-entrypoint.sh && /custom-entrypoint.sh"]
    depends_on:
      - mongodb
    networks:
      - stockplatform-network

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: ./services/productSvc/Dockerfile
    container_name: stockplatform-product-service
    restart: unless-stopped
    ports:
      - "50053:50053"
    environment:
      - GRPC_PORT=50053
      - MONGO_URI=mongodb://admin:admin123@mongodb:27017
      - GO111MODULE=on
      - SUPPLIER_SERVICE_ADDR=supplier-service:50057   # service-DNS name + gRPC port

    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - stockplatform-network

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: ./services/inventorySvc/Dockerfile
    container_name: stockplatform-inventory-service
    restart: unless-stopped
    ports:
      - "50054:50054"
    environment:
      - GRPC_PORT=50054
      - MONGO_URI=mongodb://admin:admin123@mongodb:27017
      - GO111MODULE=on
      - PRODUCT_SERVICE_ADDR=product-service:50053   # service-DNS name + gRPC port
    depends_on:
      mongodb:
        condition: service_healthy
      product-service:
        condition: service_started
    networks:
      - stockplatform-network

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: ./services/orderSvc/Dockerfile
    container_name: stockplatform-order-service
    restart: unless-stopped
    ports:
      - "50055:50055"
    environment:
      - GRPC_PORT=50055
      - MONGO_URI=mongodb://admin:admin123@mongodb:27017
      - PRODUCT_SERVICE_ADDR=product-service:50053
      - INVENTORY_SERVICE_ADDR=inventory-service:50054
      - GO111MODULE=on
    depends_on:
      mongodb:
        condition: service_healthy
      product-service:
        condition: service_started
      inventory-service:
        condition: service_started
    networks:
      - stockplatform-network

  # Supplier Service
  supplier-service:
    build:
      context: .
      dockerfile: ./services/supplierSvc/Dockerfile
    container_name: stockplatform-supplier-service
    restart: unless-stopped
    ports:
      - "50057:50057"
    environment:
      - GRPC_PORT=50057
      - MONGO_URI=mongodb://admin:admin123@mongodb:27017
      - GO111MODULE=on
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - stockplatform-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./services/userSvc/Dockerfile
    container_name: stockplatform-user-service
    restart: unless-stopped
    ports:
      - "50056:50056"
    environment:
      - GRPC_PORT=50056
      - MONGO_URI=mongodb://admin:admin123@mongodb:27017
      - JWT_SECRET=your-secret-key-here
      - ORDER_SERVICE_URL=order-service:50055
      - GO111MODULE=on
      - GOPRIVATE=github.com/leonvanderhaeghen/stockplatform
    volumes:
      - ./pkg/gen:/app/pkg/gen
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - stockplatform-network

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./services/gatewaySvc/Dockerfile
    container_name: stockplatform-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - GATEWAY_SERVICES_PRODUCT_ADDR=product-service:50053
      - GATEWAY_SERVICES_INVENTORY_ADDR=inventory-service:50054
      - GATEWAY_SERVICES_ORDER_ADDR=order-service:50055
      - GATEWAY_SERVICES_USER_ADDR=user-service:50056
      - GATEWAY_SERVICES_SUPPLIER_ADDR=supplier-service:50057
      - GATEWAY_JWT_SECRET=your-secret-key-here
      - GO111MODULE=on
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - user-service
      - supplier-service
    networks:
      - stockplatform-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stockplatform-frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    depends_on:
      - api-gateway
    networks:
      - stockplatform-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: stockplatform-jaeger
    ports:
      - "16686:16686"  # UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - stockplatform-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: stockplatform-prometheus
    ports:
      - "9090:9090"
    volumes:
      - type: bind
        source: ./deploy/prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - stockplatform-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: stockplatform-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - stockplatform-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: stockplatform-redis
    ports:
      - "6379:6379"
    networks:
      - stockplatform-network

networks:
  stockplatform-network:
    driver: bridge

volumes:
  mongodb_data:
  grafana-storage:
  prometheus_data:
